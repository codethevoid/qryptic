model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // general details
  createdBy      String // user id
  name           String
  slug           String  @unique
  image          String
  company        String?
  emailInvoiceTo String?

  // subscription and plan details
  stripeCustomerId     String            @unique
  stripeSubscriptionId String?
  subscriptionStatus   SubsrictionStatus
  subscriptionStart    DateTime?
  subscriptionEnd      DateTime?
  cancelAtPeriodEnd    Boolean           @default(false)
  failedInvoiceId      String?
  plan                 Plan              @relation(fields: [planId], references: [id])
  planId               String
  price                Price?            @relation(fields: [priceId], references: [id])
  priceId              String?
  trialEndsAt          DateTime?

  // billing details
  paymentMethodId       String? // stripe id
  paymentMethodType     String? // card
  paymentMethodBrand    String?
  paymentMethodLast4    String?
  paymentMethodExpMonth Int?
  paymentMethodExpYear  Int?

  // relations
  members  TeamMember[]
  domains  Domain[]
  links    Link[]
  events   Event[]
  invoices Invoice[]
  tags     Tag[]

  // support manager for enterprise plans
  manager Admin[] // dedicated support manager, only for enterprise plans
}

enum Role {
  super_admin // creator of the account, can transfew ownership ( can only be one )
  owner // can do anything except for deleting the account and transferring ownership
  member // create, read, update, delete
  billing // can only see invoices, billing history, and update payment method
  viewer // can only read data
}

model TeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  role      Role     @default(member)
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // relations
  links Link[]
}

enum SubsrictionStatus {
  active
  trialing
  past_due
}
